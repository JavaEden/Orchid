// Generated by delombok at Sun Mar 24 19:34:08 CDT 2019
package com.eden.orchid.impl.publication;

import com.caseyjbrooks.clog.Clog;
import com.eden.common.util.EdenPair;
import com.eden.common.util.EdenUtils;
import com.eden.orchid.api.OrchidContext;
import com.eden.orchid.api.options.annotations.Description;
import com.eden.orchid.api.options.annotations.Option;
import com.eden.orchid.api.publication.OrchidPublisher;
import com.eden.orchid.utilities.OrchidUtils;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.apache.commons.io.FileUtils;
import org.json.JSONObject;
import javax.annotation.Nullable;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotBlank;
import java.io.File;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@Description(value = "Upload your site directly to Netlify, while using your favorite CI platform.", name = "Netlify")
public class NetlifyPublisher extends OrchidPublisher {
    private static final MediaType JSON = MediaType.parse("application/json; charset=utf-8");
    private static final MediaType BINARY = MediaType.parse("application/octet-stream");
    private static final String netlifyUrl = "https://api.netlify.com/api/v1";
    @Option
    @Description("Your Netlify site ID or domain (ie. orchid.netlify.com).")
    @NotBlank(message = "A Netlify site domain must be provided.")
    private String siteId;
    @NotBlank(message = "A Netlify Personal Access Token is required for deploys, set as \'netlifyToken\' flag.")
    private final String netlifyToken;
    private final String destinationDir;
    private final OkHttpClient client;
    private int filesUploaded = 0;

    @Inject
    public NetlifyPublisher(OrchidContext context, OkHttpClient client, @Named("dest") String destinationDir, @Nullable @Named("netlifyToken") String netlifyToken) {
        super(context, "netlify", 100);
        this.client = client;
        this.destinationDir = destinationDir;
        this.netlifyToken = netlifyToken;
    }

    @Override
    public boolean validate() {
        boolean valid = super.validate();
        // make sure the site exists
        EdenPair<Boolean, String> site = netlifyGet("sites/" + siteId);
        if (!site.first) {
            Clog.e("A Netlify site at {} does not exist or it cannot be accessed.", siteId);
            valid = false;
        }
        return valid;
    }

    @Override
    public void publish() {
        File file = new File(destinationDir);
        Map<String, List<File>> fileMap = new HashMap<>();
        // create digest of files to be uploaded
        JSONObject body = new JSONObject();
        JSONObject body_files = new JSONObject();
        if (file.exists() && file.isDirectory()) {
            Collection newFiles = FileUtils.listFiles(file, null, true);
            if (!EdenUtils.isEmpty(newFiles)) {
                for (Object object : newFiles) {
                    File child = (File) object;
                    if (child.isDirectory()) continue;
                    try {
                        String path = OrchidUtils.getRelativeFilename(child.getAbsolutePath(), destinationDir);
                        String sha1 = OrchidUtils.sha1(child);
                        body_files.put(path, sha1);
                        fileMap.computeIfAbsent(sha1, s -> new ArrayList<>()).add(child);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        body.put("files", body_files);
        // post to Netlify to determine which files need to be uploaded still
        EdenPair<Boolean, String> requiredFilesResponse = netlifyPost(Clog.format("sites/{}/deploys", siteId), body);
        if (!requiredFilesResponse.first) {
            throw new RuntimeException("something went wrong attempting to deploy to Netlify: " + requiredFilesResponse.second);
        }
        JSONObject requiredFiles = new JSONObject(requiredFilesResponse.second);
        if (requiredFiles.getJSONArray("required").length() == 0) {
            Clog.i("All files up-to-date on Netlify.");
        } else {
            Clog.i("Uploading {} files to Netlify.", requiredFiles.getJSONArray("required").length());
            filesUploaded = 0;
            // upload all required files
            String deployId = requiredFiles.getString("id");
            requiredFiles.getJSONArray("required").toList().parallelStream().filter(Objects::nonNull).map(o -> (String) o).flatMap(sha1ToUpload -> fileMap.getOrDefault(sha1ToUpload, new ArrayList<>()).parallelStream()).forEach(fileToUpload -> {
                String path = OrchidUtils.getRelativeFilename(fileToUpload.getAbsolutePath(), destinationDir);
                netlifyUpload(deployId, path, fileToUpload, requiredFiles.getJSONArray("required").length());
            });
        }
    }

    private EdenPair<Boolean, String> netlifyGet(String url) {
        String fullURL = Clog.format("{}/{}", netlifyUrl, url);
        Clog.d("Netlify GET: {}", fullURL);
        try {
            Request request = new Request.Builder().url(fullURL).header("Authorization", "Bearer " + netlifyToken).get().build();
            Response response = client.newCall(request).execute();
            timeoutRateLimit(response);
            String bodyString = response.body().string();
            if (!response.isSuccessful()) {
                Clog.e("{}", bodyString);
            }
            return new EdenPair<>(response.isSuccessful(), bodyString);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new EdenPair<>(false, null);
    }

    private EdenPair<Boolean, String> netlifyPost(String url, JSONObject body) {
        String fullURL = Clog.format("{}/{}", netlifyUrl, url);
        Clog.d("Netlify POST: {}", fullURL);
        try {
            Request request = new Request.Builder().url(fullURL).header("Authorization", "Bearer " + netlifyToken).post(RequestBody.create(JSON, body.toString())).build();
            Response response = client.newCall(request).execute();
            timeoutRateLimit(response);
            String bodyString = response.body().string();
            if (!response.isSuccessful()) {
                Clog.e("{}", bodyString);
            }
            return new EdenPair<>(response.isSuccessful(), bodyString);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new EdenPair<>(false, null);
    }

    private EdenPair<Boolean, String> netlifyUpload(String deployId, String filename, File toUpload, int totalFiles) {
        String fullURL = Clog.format("{}/deploys/{}/files/{}", netlifyUrl, deployId, filename);
        filesUploaded++;
        Clog.d("Netlify UPLOAD {}/{}: {}", filesUploaded, totalFiles, fullURL);
        try {
            Request request = new Request.Builder().url(fullURL).header("Authorization", "Bearer " + netlifyToken).put(RequestBody.create(BINARY, toUpload)).build();
            Response response = client.newCall(request).execute();
            timeoutRateLimit(response);
            return new EdenPair<>(response.isSuccessful(), response.body().string());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new EdenPair<>(false, null);
    }

    private void timeoutRateLimit(Response response) {
        try {
            int RateLimit_Limit = Integer.parseInt(response.header("X-RateLimit-Limit"));
            int RateLimit_Remaining = Integer.parseInt(response.header("X-RateLimit-Remaining"));
            Instant RateLimit_Reset = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z").parse(response.header("X-RateLimit-Reset")).toInstant();
            Instant current = Instant.now();
            Duration d = Duration.between(RateLimit_Reset, current);
            // if we are nearing the rate limit, pause down a bit until it resets
            if ((RateLimit_Remaining * 1.0 / RateLimit_Limit * 1.0) < 0.1) {
                Thread.sleep(Math.abs(d.toMillis()));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @java.lang.SuppressWarnings("all")
    public String getSiteId() {
        return this.siteId;
    }

    @java.lang.SuppressWarnings("all")
    public void setSiteId(final String siteId) {
        this.siteId = siteId;
    }

    @java.lang.SuppressWarnings("all")
    public String getNetlifyToken() {
        return this.netlifyToken;
    }
}
