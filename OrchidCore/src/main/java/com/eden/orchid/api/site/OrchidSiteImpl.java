// Generated by delombok at Sun Mar 24 19:34:08 CDT 2019
package com.eden.orchid.api.site;

import com.eden.orchid.api.OrchidContext;
import com.eden.orchid.api.options.annotations.Description;
import com.eden.orchid.api.options.annotations.Option;
import com.eden.orchid.utilities.OrchidUtils;
import com.google.inject.name.Named;
import org.json.JSONObject;
import javax.inject.Inject;
import java.nio.file.Paths;

@Description(value = "The global configurations for your Orchid site.", name = "Site")
public final class OrchidSiteImpl implements OrchidSite {
    private OrchidContext context;
    private final String orchidVersion;
    private final String currentWorkingDirectory;
    private String version;
    private String baseUrl;
    private String environment;
    private String defaultTemplateExtension;
    @Option
    @Description("Basic, common information about your site, mostly for display and SEO purposes.")
    private SiteInfo about;

    @Inject
    public OrchidSiteImpl(String orchidVersion, @Named("version") String version, @Named("baseUrl") String baseUrl, @Named("environment") String environment, @Named("defaultTemplateExtension") String defaultTemplateExtension) {
        this.orchidVersion = orchidVersion;
        this.currentWorkingDirectory = OrchidUtils.normalizePath(Paths.get(".").toAbsolutePath().normalize().toString());
        this.version = version;
        this.baseUrl = OrchidUtils.normalizePath(baseUrl);
        this.environment = environment;
        this.defaultTemplateExtension = defaultTemplateExtension;
    }

    @Override
    public void initialize(OrchidContext context) {
        this.context = context;
    }

    @Override
    public void setBaseUrl(String baseUrl) {
        this.baseUrl = OrchidUtils.normalizePath(baseUrl);
    }

    @Override
    public boolean isDebug() {
        return !isProduction();
    }

    @Override
    public boolean isProduction() {
        return this.getEnvironment().equalsIgnoreCase("prod") || this.getEnvironment().equalsIgnoreCase("production");
    }

    @Override
    public SiteInfo getSiteInfo() {
        return about;
    }

    @Override
    public JSONObject toJSON() {
        JSONObject site = new JSONObject();
        site.put("orchidVersion", orchidVersion);
        site.put("version", version);
        site.put("baseUrl", baseUrl);
        site.put("environment", environment);
        return site;
    }

    @Override
    public String toString() {
        return this.toJSON().toString();
    }

    @java.lang.SuppressWarnings("all")
    public String getOrchidVersion() {
        return this.orchidVersion;
    }

    @java.lang.SuppressWarnings("all")
    public String getCurrentWorkingDirectory() {
        return this.currentWorkingDirectory;
    }

    @java.lang.SuppressWarnings("all")
    public String getVersion() {
        return this.version;
    }

    @java.lang.SuppressWarnings("all")
    public void setVersion(final String version) {
        this.version = version;
    }

    @java.lang.SuppressWarnings("all")
    public String getBaseUrl() {
        return this.baseUrl;
    }

    @java.lang.SuppressWarnings("all")
    public String getEnvironment() {
        return this.environment;
    }

    @java.lang.SuppressWarnings("all")
    public void setEnvironment(final String environment) {
        this.environment = environment;
    }

    @java.lang.SuppressWarnings("all")
    public String getDefaultTemplateExtension() {
        return this.defaultTemplateExtension;
    }

    @java.lang.SuppressWarnings("all")
    public void setDefaultTemplateExtension(final String defaultTemplateExtension) {
        this.defaultTemplateExtension = defaultTemplateExtension;
    }

    @java.lang.SuppressWarnings("all")
    public SiteInfo getAbout() {
        return this.about;
    }

    @java.lang.SuppressWarnings("all")
    public void setAbout(final SiteInfo about) {
        this.about = about;
    }
}
