
// Normal module configuration
//----------------------------------------------------------------------------------------------------------------------

apply plugin: 'java-library'

dependencies {

    // Dynamic Component Registration
    api "com.google.inject:guice:$guiceVersion"
    api "io.github.classgraph:classgraph:$classgraphVersion"

    // core utilities
    api "com.eden:Common:${JavaEden.Common}"
    api "com.eden:Clog4j:${JavaEden.Clog}"
    api "com.eden:krow:${JavaEden.Krow}"
    api "com.squareup.okhttp3:okhttp:$okhttpVersion"
    api "commons-io:commons-io:$commonsioVersion"
    api "org.apache.commons:commons-lang3:$commonslangVersion"
    api "net.coobird:thumbnailator:$thumbnailatorVersion"
    
    // validation
    api "javax.validation:validation-api:$validationApiVersion"
    implementation "org.hibernate.validator:hibernate-validator:$hibernateValidatorVersion"
    implementation "org.glassfish:javax.el:$glassfishElVersion"

    // Included parsers: JSON, YAML, TOML, CSV, Pebble, Markdown, Sass
    api "org.json:json:$orgjsonVersion"
    implementation "org.yaml:snakeyaml:$snakeyamlVersion"
    implementation "com.moandjiezana.toml:toml4j:$toml4jVersion"
    implementation "io.pebbletemplates:pebble:$pebbleVersion"
    implementation "io.bit3:jsass:$jsassVersion"
    implementation "com.univocity:univocity-parsers:$univocityParsersVersion"

    // Flexmark extensions
    api "com.vladsch.flexmark:flexmark:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-aside:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-attributes:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-enumerated-reference:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tables:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tasklist:$flexmarkVersion"
    implementation "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion"

    // server
    implementation "org.nanohttpd:nanohttpd:$nanohttpdVersion"
    implementation "org.nanohttpd:nanohttpd-websocket:$nanohttpdVersion"

    // generate own documentation with Orchid
    orchidCompile mainProjects
}

// Make sure Core is compiled before plugins, but javadoc run after plugins
//----------------------------------------------------------------------------------------------------------------------

static boolean otherProjectsTask(Task task, String taskName) {
    return !task.path.startsWith(':OrchidCore') && task.path.endsWith(":${taskName}")
}

project.parent.subprojects.each { subproject ->
    project.tasks.javadoc.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.orchidRun.dependsOn subproject.tasks.matching { task -> otherProjectsTask(task, 'jar') }
    project.tasks.javadoc.shouldRunAfter subproject.tasks.matching { task -> otherProjectsTask(task, 'javadoc') }
}

// Generate a Class containing the current build version, so it can be injected into OrchidSite
//----------------------------------------------------------------------------------------------------------------------

// TODO: Change this to have the runtime read from a .properties file rather than reflectively find this class
task generateSources {
    def outputDir = file("$buildDir/generated-src")
    outputs.dir outputDir
    doFirst {
        def srcFile = new File(outputDir, "com/eden/orchid/OrchidVersion.java")
        srcFile.parentFile.mkdirs()
        srcFile.write("""
package com.eden.orchid;
public class OrchidVersion {
   public static String getVersion() { return "$project.version"; }
}
""")
    }
}
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java
