
orchid {
    runTask = "${project.ext.commonRunTask}"
    version = "${project.version}"
    theme   = "${project.ext.commonTheme}"

    if(project.hasProperty('env')) {
        switch(project.property('env')) {
            case 'prod':
                baseUrl = "${project.ext.commonBaseUrl}/${project.name}"
                break
            case 'staging':
                baseUrl = "${project.ext.commonBaseUrl}/${project.name}"
                break
            case 'dev':
                baseUrl = "${project.ext.commonBaseUrl}"
                break
        }
    }
    else {
        baseUrl = "${project.ext.commonBaseUrl}"
    }

    args = [
        "absApiKey ${project.properties['ABS_ApiKey']}"
    ]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from project.sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task prepareDocumentation {
    doLast {
        copy {
            from file("$buildDir/docs/orchid")
            into file("${rootProject.buildDir}/docs/orchid/${project.name}")
        }
    }
}

rootProject.tasks.prepareDocumentation.dependsOn project.tasks.prepareDocumentation

if(project.sourceSets.main.allJava.files?.empty) {
    project.tasks.assemble.dependsOn orchidBuild
    project.tasks.orchidBuild.mustRunAfter javadoc
    project.tasks.orchidBuild.onlyIf {
        !(project.hasProperty('noJavadoc') && project.property('noJavadoc')) && !project.orchid.noJavadoc
    }
}
