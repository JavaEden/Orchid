apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'com.eden.orchidPlugin'
apply plugin: "com.dorongold.task-tree"
apply plugin: "org.ajoberstar.grgit"
apply plugin: "kotlin"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
}

project.group = rootProject.group
project.version = rootProject.version

ext {
    commonTheme = 'BsDoc'
//    commonTheme = 'Editorial'
//    commonTheme = 'FutureImperfect'
//    commonTheme = 'Materialize'

    commonRunTask = "build"

    if (project.hasProperty('env') && project.property('env') == 'prod') {
        String isPullRequest = System.getenv('PULL_REQUEST')
        if(isPullRequest == "true") {
            commonBaseUrl = System.getenv('DEPLOY_URL')
        }
        else {
            commonBaseUrl = System.getenv('URL')
        }
    }
    else {
        commonBaseUrl = 'http://localhost:8080'
    }
}

apply from: "$rootDir/gradle/test.gradle"
apply from: "$rootDir/gradle/javadoc.gradle"
apply from: "$rootDir/gradle/publish.gradle"

dependencies {
    testCompile 'org.testng:testng:6.14.0'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:2.+'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
check.dependsOn jacocoTestReport

task checkForExtensionFile {
    onlyIf {
        project.name != "OrchidCore"
    }
    doLast {
        def extensionName = project.name.toString()
        def extensionType = project.parent.name.toString()
        if(extensionType == 'languageExtensions') {
            extensionType = 'plugins'
        }
        def fullExtensionFilename = "${rootProject.rootDir}/OrchidCore/src/orchid/resources/pages/${extensionType}/${extensionName}.md"
        def extensionFile = file(fullExtensionFilename)

        if(!extensionFile.exists()) {
            throw new FileNotFoundException("There is no plugin entry for this plugin, expected 'pages/${extensionType}/${extensionName}.md' to exist in OrchidCore Orchid resources.")
        }
    }
}
check.dependsOn checkForExtensionFile